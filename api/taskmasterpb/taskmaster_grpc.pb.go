// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/taskmasterpb/taskmaster.proto

package taskmasterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskmasterClient is the client API for Taskmaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskmasterClient interface {
	Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TasksList, error)
	GetTask(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*Task, error)
	StartTask(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopTask(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RestartTask(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskmasterClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskmasterClient(cc grpc.ClientConnInterface) TaskmasterClient {
	return &taskmasterClient{cc}
}

func (c *taskmasterClient) Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Taskmaster/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterClient) Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Taskmaster/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterClient) ListTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TasksList, error) {
	out := new(TasksList)
	err := c.cc.Invoke(ctx, "/Taskmaster/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterClient) GetTask(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/Taskmaster/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterClient) StartTask(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Taskmaster/StartTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterClient) StopTask(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Taskmaster/StopTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterClient) RestartTask(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Taskmaster/RestartTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskmasterServer is the server API for Taskmaster service.
// All implementations must embed UnimplementedTaskmasterServer
// for forward compatibility
type TaskmasterServer interface {
	Reload(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Stop(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ListTasks(context.Context, *emptypb.Empty) (*TasksList, error)
	GetTask(context.Context, *TaskIdentifier) (*Task, error)
	StartTask(context.Context, *TaskIdentifier) (*emptypb.Empty, error)
	StopTask(context.Context, *TaskIdentifier) (*emptypb.Empty, error)
	RestartTask(context.Context, *TaskIdentifier) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskmasterServer()
}

// UnimplementedTaskmasterServer must be embedded to have forward compatible implementations.
type UnimplementedTaskmasterServer struct {
}

func (UnimplementedTaskmasterServer) Reload(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedTaskmasterServer) Stop(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedTaskmasterServer) ListTasks(context.Context, *emptypb.Empty) (*TasksList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTaskmasterServer) GetTask(context.Context, *TaskIdentifier) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskmasterServer) StartTask(context.Context, *TaskIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTask not implemented")
}
func (UnimplementedTaskmasterServer) StopTask(context.Context, *TaskIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTask not implemented")
}
func (UnimplementedTaskmasterServer) RestartTask(context.Context, *TaskIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartTask not implemented")
}
func (UnimplementedTaskmasterServer) mustEmbedUnimplementedTaskmasterServer() {}

// UnsafeTaskmasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskmasterServer will
// result in compilation errors.
type UnsafeTaskmasterServer interface {
	mustEmbedUnimplementedTaskmasterServer()
}

func RegisterTaskmasterServer(s grpc.ServiceRegistrar, srv TaskmasterServer) {
	s.RegisterService(&Taskmaster_ServiceDesc, srv)
}

func _Taskmaster_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Taskmaster/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).Reload(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskmaster_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Taskmaster/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).Stop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskmaster_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Taskmaster/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).ListTasks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskmaster_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Taskmaster/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).GetTask(ctx, req.(*TaskIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskmaster_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Taskmaster/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).StartTask(ctx, req.(*TaskIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskmaster_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Taskmaster/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).StopTask(ctx, req.(*TaskIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskmaster_RestartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).RestartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Taskmaster/RestartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).RestartTask(ctx, req.(*TaskIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

// Taskmaster_ServiceDesc is the grpc.ServiceDesc for Taskmaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Taskmaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Taskmaster",
	HandlerType: (*TaskmasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reload",
			Handler:    _Taskmaster_Reload_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Taskmaster_Stop_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _Taskmaster_ListTasks_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Taskmaster_GetTask_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _Taskmaster_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Taskmaster_StopTask_Handler,
		},
		{
			MethodName: "RestartTask",
			Handler:    _Taskmaster_RestartTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/taskmasterpb/taskmaster.proto",
}
